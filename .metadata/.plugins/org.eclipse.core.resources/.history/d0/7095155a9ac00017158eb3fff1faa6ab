/*
 * main.cpp
 *
 *  Created on: Oct 28, 2017
 *      Author: apple
 */

#include <iostream>
#include <vector>
#include <queue>

enum Action {Top,Bottom,Left,Right,Init};

class Data
{

public:
	int data[3][3];
	Data(int pdata[3][3],int px,int py,Action act) : x(px), y(py), Last_act(act)
	{
		//data = new int[3][3];
		for(int i = 0;i < 3; i++)
			for(int j = 0;j < 3; j++)
				data[i][j] = pdata[i][j];
	}
	Action getAction() const {return Last_act;}
	int getX() const {return x;}
	int getY() const {return y;}
	Data operator=(Data &src)
	{
		Data data(src.data,src.x,src.y,src.Last_act);
		return data;
	}
	void move(Action act)
	{
		switch(act)
		{
		case Top:
			std::swap(data[x][y],data[--x][y]);
			Last_act = Top;
			break;
		case Bottom:
			std::swap(data[x][y],data[++x][y]);
			Last_act = Bottom;
			break;
		case Left:
			std::swap(data[x][y],data[x][--y]);
			Last_act = Left;
			break;
		case Right:
			std::swap(data[x][y],data[x][++y]);
			Last_act = Right;
			break;
		}
	}
private:

	int x,y;
	Action Last_act;


};

struct Node
{
	Node *parent;
	int depth;
	int pathcost;
	Data data;
	int fn;

	Node(Node *pparent,int pdepth,int ppathcost,int hn,Data &pdata) : data(pdata)
	{
		parent = pparent;
		depth = pdepth;
		pathcost = ppathcost;
		fn = hn;
	}

};

void calculateF(Node &src,Node &dst)
{
	int distance = 0;
	for(int i = 0; i < 3; i++)
		for(int j = 0; j < 3; j++)
			for(int k = 0; k < 3; k++)
				for(int t = 0; t < 3; t++)
				{
					if(src.data.data[i][j] == dst.data.data[k][t])
						distance += abs(k - i) + abs(t - j);
				}
	src.fn = distance + src.depth;
}

void print(const Node *aim)
{
	if(aim == nullptr)
		return;
	for(int i = 0;i < 3;i++)
	{
		std::cout << std::endl;
		for(int j =0;j < 3;j++)
			std::cout << aim->data.data[i][j] << "  ";
	}
	std::cout << std::endl << "````````````````````````````" << std::endl;
	print(aim->parent);
}

bool equal(const Node &a,const Node &b)
{
	for(int i = 0;i < 3; i++)
		for(int j = 0;j < 3; j++)
			if(a.data.data[i][j] != b.data.data[i][j])
				return false;
	return true;
}

bool IsInVector(Node &src,std::vector<Node> &dst,std::vector<Node>::iterator &InVector)
{
	for(auto it = dst.begin(); it != dst.end(); it++)
	{
		if(equal(src,*it))
		{
			InVector = it;
			return true;
		}
	}
	return false;
}

bool Expand(const Node &source,std::vector<Node> &open, std::vector<Node> &closed,Node &goal)
{
	if(equal(source,goal))
	{
		print(&source);
		return true;
	}
	for(int i = 0; i < 4; i++)
	{
		Node temp(&source,source.depth + 1,source.pathcost + 1, source.fn ,source.data);
		switch(i)
		{
		case Top:
			if(temp.data.getX() != 0)
			{
				temp.data.move(Top);
			}
			break;
		case Bottom:
			if(temp.data.getX() != 2)
			{
				temp.data.move(Bottom);
			}
			break;
		case Left:
			if(temp.data.getY() != 0)
			{
				temp.data.move(Left);
			}
			break;
		case Right:
			if(temp.data.getY() != 2)
			{
				temp.data.move(Right);
			}
			break;
		}
		calculateF(temp,goal); //计算子节点x的f值
		std::vector<Node>::iterator old;
		if(IsInVector(temp,open,old))
		{
			if(temp.depth < old->depth)
			{
				old->depth = temp.depth;
				old->fn = temp.fn;
				old->pathcost = temp.pathcost;
				old->parent = temp.parent;
			}else
			{
				continue;
			}
		}else
		{
			if(IsInVector(temp,closed,old))
			{
				if(temp.depth < old->depth)
				{
					old->depth = temp.depth;
					old->fn = temp.fn;
					old->pathcost = temp.pathcost;
					old->parent = temp.parent;
				}else
				{
					continue;
				}
			}else
			{
				open.push_back(temp);
			}
		}
	}
	return false;
}

std::vector<Node>::iterator minFn(std::vector<Node>& src)
{
	int temp = src[0].fn;
	std::vector<Node>::iterator it;
	for(auto itor = src.begin(); itor != src.end(); itor++)
	{
		if(itor->fn <= temp)
		{
			temp = itor->fn;
			it = itor;
		}
	}
	return it;
}

void AStarSearch(Node &First,Node &goal)
{
	std::vector<Node> open;
	std::vector<Node> closed;
	calculateF(First,goal);
	open.push_back(First);
	while(!open.empty())
	{
		auto bestNode = minFn(open);
		closed.push_back(*bestNode);
		open.erase(bestNode);

		for(auto it = open.begin(); it != open.end(); it++)
			std::cout << it->data.getX() << it->data.getY() << std::endl;

		if(Expand(*bestNode,open,closed,goal))
		{
			std::cout << "Succesful!";
			return;
		}
	}
	std::cout << "Faile";
}


int main()
{
	int first[3][3] = {{2,8,3},{1,0,4},{7,6,5}};
	int last[3][3] = {{1,2,3},{8,0,4},{7,6,5}};
	Data c(first,1,1,Init);
	Data d(last,1,1,Init);
	Node a(nullptr,0,0,0,c);
	Node b(nullptr,0,0,0,d);
	AStarSearch(a,b);
}



